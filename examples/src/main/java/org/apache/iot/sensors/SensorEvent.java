/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.iot.sensors;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SensorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorEvent\",\"namespace\":\"org.apache.iot.sensors\",\"fields\":[{\"name\":\"xid\",\"type\":\"long\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"symbols\":[\"temeperature\",\"humidity\",\"illuminance\"]}},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"LocationRecord\",\"fields\":[{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long xid;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int version;
  @Deprecated public long timestamp;
  @Deprecated public org.apache.iot.sensors.SensorType type;
  @Deprecated public org.apache.iot.sensors.LocationRecord location;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SensorEvent() {}

  /**
   * All-args constructor.
   */
  public SensorEvent(java.lang.Long xid, java.lang.CharSequence name, java.lang.Integer version, java.lang.Long timestamp, org.apache.iot.sensors.SensorType type, org.apache.iot.sensors.LocationRecord location) {
    this.xid = xid;
    this.name = name;
    this.version = version;
    this.timestamp = timestamp;
    this.type = type;
    this.location = location;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return xid;
    case 1: return name;
    case 2: return version;
    case 3: return timestamp;
    case 4: return type;
    case 5: return location;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: xid = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: version = (java.lang.Integer)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: type = (org.apache.iot.sensors.SensorType)value$; break;
    case 5: location = (org.apache.iot.sensors.LocationRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'xid' field.
   */
  public java.lang.Long getXid() {
    return xid;
  }

  /**
   * Sets the value of the 'xid' field.
   * @param value the value to set.
   */
  public void setXid(java.lang.Long value) {
    this.xid = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'type' field.
   */
  public org.apache.iot.sensors.SensorType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(org.apache.iot.sensors.SensorType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'location' field.
   */
  public org.apache.iot.sensors.LocationRecord getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(org.apache.iot.sensors.LocationRecord value) {
    this.location = value;
  }

  /** Creates a new SensorEvent RecordBuilder */
  public static org.apache.iot.sensors.SensorEvent.Builder newBuilder() {
    return new org.apache.iot.sensors.SensorEvent.Builder();
  }
  
  /** Creates a new SensorEvent RecordBuilder by copying an existing Builder */
  public static org.apache.iot.sensors.SensorEvent.Builder newBuilder(org.apache.iot.sensors.SensorEvent.Builder other) {
    return new org.apache.iot.sensors.SensorEvent.Builder(other);
  }
  
  /** Creates a new SensorEvent RecordBuilder by copying an existing SensorEvent instance */
  public static org.apache.iot.sensors.SensorEvent.Builder newBuilder(org.apache.iot.sensors.SensorEvent other) {
    return new org.apache.iot.sensors.SensorEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for SensorEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorEvent>
    implements org.apache.avro.data.RecordBuilder<SensorEvent> {

    private long xid;
    private java.lang.CharSequence name;
    private int version;
    private long timestamp;
    private org.apache.iot.sensors.SensorType type;
    private org.apache.iot.sensors.LocationRecord location;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.iot.sensors.SensorEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.iot.sensors.SensorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.xid)) {
        this.xid = data().deepCopy(fields()[0].schema(), other.xid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SensorEvent instance */
    private Builder(org.apache.iot.sensors.SensorEvent other) {
            super(org.apache.iot.sensors.SensorEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.xid)) {
        this.xid = data().deepCopy(fields()[0].schema(), other.xid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.location)) {
        this.location = data().deepCopy(fields()[5].schema(), other.location);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'xid' field */
    public java.lang.Long getXid() {
      return xid;
    }
    
    /** Sets the value of the 'xid' field */
    public org.apache.iot.sensors.SensorEvent.Builder setXid(long value) {
      validate(fields()[0], value);
      this.xid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'xid' field has been set */
    public boolean hasXid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'xid' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearXid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.apache.iot.sensors.SensorEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public java.lang.Integer getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public org.apache.iot.sensors.SensorEvent.Builder setVersion(int value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'version' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearVersion() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public org.apache.iot.sensors.SensorEvent.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'timestamp' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public org.apache.iot.sensors.SensorType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.apache.iot.sensors.SensorEvent.Builder setType(org.apache.iot.sensors.SensorType value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'type' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'location' field */
    public org.apache.iot.sensors.LocationRecord getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public org.apache.iot.sensors.SensorEvent.Builder setLocation(org.apache.iot.sensors.LocationRecord value) {
      validate(fields()[5], value);
      this.location = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'location' field */
    public org.apache.iot.sensors.SensorEvent.Builder clearLocation() {
      location = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public SensorEvent build() {
      try {
        SensorEvent record = new SensorEvent();
        record.xid = fieldSetFlags()[0] ? this.xid : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.Integer) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (org.apache.iot.sensors.SensorType) defaultValue(fields()[4]);
        record.location = fieldSetFlags()[5] ? this.location : (org.apache.iot.sensors.LocationRecord) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
